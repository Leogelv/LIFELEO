import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { Toaster } from 'sonner'
import { NavigationLoader } from './components/ui/NavigationLoader'
import LogViewer from './components/LogViewer'
import Script from 'next/script'
import { UserIdProvider } from './contexts/UserIdContext'
import { PasswordProtection } from './components/PasswordProtection'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'LIFELEO',
  description: 'Life management app',
}

// Expose environment variables to the client
export const runtime = 'edge'
export const preferredRegion = 'auto'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram WebApp - –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const getTelegramWebAppStatus = () => {
    if (typeof window === 'undefined') return false;
    return window.location.href.includes('tgWebAppData') || 
           window.location.href.includes('tgWebAppPlatform');
  };

  // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ,
  // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≥–∏–¥—Ä–∞—Ü–∏–∏

  return (
    <html lang="en">
      <head>
        {/* –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç Telegram WebApp –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ Telegram */}
        <Script id="check-telegram-env">
          {`
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram
            function isTelegramEnvironment() {
              if (typeof window === 'undefined') return false;
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç Telegram
              const hasTelegramParams = window.location.href.includes('tgWebAppData') || 
                                        window.location.href.includes('tgWebAppPlatform');
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ User-Agent
              const userAgent = window.navigator.userAgent || '';
              const isTelegramUserAgent = userAgent.includes('Telegram') || userAgent.includes('TelegramBot');
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
              const urlParams = new URLSearchParams(window.location.search);
              const forceWeb = urlParams.get('force_web') === 'true';
              
              // –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é, —Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç
              if (forceWeb) {
                console.log('üåê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –≤–µ–±-–≤–µ—Ä—Å–∏—é (force_web=true)');
                return false;
              }
              
              console.log('üì± –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ layout:', { 
                hasTelegramParams, 
                isTelegramUserAgent,
                userAgent,
                forceWeb
              });
              
              return hasTelegramParams || isTelegramUserAgent;
            }
            
            // –ï—Å–ª–∏ –º—ã –≤ Telegram, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
            if (isTelegramEnvironment()) {
              console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é Telegram WebApp —Å–∫—Ä–∏–ø—Ç...');
              const script = document.createElement('script');
              script.src = 'https://telegram.org/js/telegram-web-app.js';
              script.async = true;
              document.head.appendChild(script);
            } else {
              console.log('üåê –ù–µ –≤ Telegram, –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é Telegram WebApp —Å–∫—Ä–∏–ø—Ç');
            }
          `}
        </Script>
      </head>
      <body className={inter.className}>
        <UserIdProvider>
          <NavigationLoader />
          <PasswordProtection>
            {children}
          </PasswordProtection>
          <Toaster 
            position="top-center"
            toastOptions={{
              style: {
                background: '#2A2A2A',
                border: '1px solid #333333',
                color: '#E8D9C5',
              }
            }}
          />
          <LogViewer />
        </UserIdProvider>
      </body>
    </html>
  )
}
