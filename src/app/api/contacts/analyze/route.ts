import { NextResponse } from 'next/server'
import { createClient } from '@/utils/supabase/server'
import { cookies } from 'next/headers'

// –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥ (–ª–∏–º–∏—Ç Vercel)
export const maxDuration = 60;

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight
export async function OPTIONS() {
  return NextResponse.json({}, { headers: corsHeaders })
}

if (!process.env.YANDEX_API_KEY) {
  console.error('‚ùå YANDEX_API_KEY is not set')
  throw new Error('YANDEX_API_KEY is not set in environment variables')
}

if (!process.env.DEEPSEEK_API_KEY) {
  console.error('‚ùå DEEPSEEK_API_KEY is not set')
  throw new Error('DEEPSEEK_API_KEY is not set in environment variables')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —á–∞–Ω–∫–∏
function chunkHistory(history: any[], chunkSize: number = 50) {
  const chunks = []
  for (let i = 0; i < history.length; i += chunkSize) {
    chunks.push(history.slice(i, i + chunkSize))
  }
  return chunks
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
async function analyzeChunk(chunk: any[]) {
  const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
      'Content-Type': 'application/json'
    },
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 2 –º–∏–Ω—É—Ç
    signal: AbortSignal.timeout(120000),
    body: JSON.stringify({
      model: "deepseek-chat",
      response_format: {
        type: 'json_object'
      },
      messages: [
        {
          role: "system",
          content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "summary": "–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –±–µ—Å–µ–¥—ã",
  "topics": ["–ú–∞—Å—Å–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö —Ç–µ–º"],
  "sentiment": "–û–±—â–∏–π —Ç–æ–Ω –±–µ—Å–µ–¥—ã (positive/neutral/negative)",
  "actionItems": ["–ú–∞—Å—Å–∏–≤ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ –¥–µ–ª –Ω–∞ –±—É–¥—É—â–µ–µ"],
  "participants": {
    "roles": ["–†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã"],
    "interests": ["–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    "communicationStyle": ["–°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–∏–∑—É–∞–ª/–∞—É–¥–∏–∞–ª/–∫–∏–Ω–µ—Å—Ç–µ—Ç/–¥–∏–≥–∏—Ç–∞–ª)"]
  },
  "context": {
    "type": "–¢–∏–ø –±–µ—Å–µ–¥—ã (–¥–µ–ª–æ–≤–∞—è/–ª–∏—á–Ω–∞—è/—Å–º–µ—à–∞–Ω–Ω–∞—è)",
    "mainGoal": "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
    "technologies": ["–£–ø–æ–º—è–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–ø—Ä–æ–¥—É–∫—Ç—ã/–∫–æ–º–ø–∞–Ω–∏–∏"]
  },
  "psychologicalAspects": {
    "values": ["–ö–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"],
    "mood": "–û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã"
  },
  "businessAnalysis": {
    "strengths": ["–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞"],
    "risks": ["–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏"],
    "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º"]
  },
  "conclusions": {
    "achieved": ["–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"],
    "pending": ["–ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"],
    "nextSteps": ["–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"]
  }
}`
        },
        {
          role: "user",
          content: JSON.stringify(chunk)
        }
      ]
    })
  })

  if (!response.ok) {
    throw new Error(`DeepSeek API error: ${response.status} ${response.statusText}`)
  }

  const result = await response.json()
  return JSON.parse(result.choices[0].message.content)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —á–∞–Ω–∫–æ–≤
function mergeAnalysis(analyses: any[]) {
  if (analyses.length === 0) return null
  if (analyses.length === 1) return analyses[0]

  const merged = JSON.parse(JSON.stringify(analyses[0])) // –ì–ª—É–±–æ–∫–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã –∏–∑ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
  for (let i = 1; i < analyses.length; i++) {
    const analysis = analyses[i]
    merged.topics = Array.from(new Set([...merged.topics, ...analysis.topics]))
    merged.actionItems = Array.from(new Set([...merged.actionItems, ...analysis.actionItems]))
    merged.participants.roles = Array.from(new Set([...merged.participants.roles, ...analysis.participants.roles]))
    merged.participants.interests = Array.from(new Set([...merged.participants.interests, ...analysis.participants.interests]))
    merged.participants.communicationStyle = Array.from(new Set([...merged.participants.communicationStyle, ...analysis.participants.communicationStyle]))
    merged.context.technologies = Array.from(new Set([...merged.context.technologies, ...analysis.context.technologies]))
    merged.psychologicalAspects.values = Array.from(new Set([...merged.psychologicalAspects.values, ...analysis.psychologicalAspects.values]))
    merged.psychologicalAspects.motivations = Array.from(new Set([...merged.psychologicalAspects.motivations, ...analysis.psychologicalAspects.motivations]))
    merged.businessAnalysis.strengths = Array.from(new Set([...merged.businessAnalysis.strengths, ...analysis.businessAnalysis.strengths]))
    merged.businessAnalysis.risks = Array.from(new Set([...merged.businessAnalysis.risks, ...analysis.businessAnalysis.risks]))
    merged.businessAnalysis.recommendations = Array.from(new Set([...merged.businessAnalysis.recommendations, ...analysis.businessAnalysis.recommendations]))
    merged.conclusions.achieved = Array.from(new Set([...merged.conclusions.achieved, ...analysis.conclusions.achieved]))
    merged.conclusions.pending = Array.from(new Set([...merged.conclusions.pending, ...analysis.conclusions.pending]))
    merged.conclusions.nextSteps = Array.from(new Set([...merged.conclusions.nextSteps, ...analysis.conclusions.nextSteps]))
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º summary, –æ–±—ä–µ–¥–∏–Ω—è—è –≤—Å–µ —Å–∞–º–º–∞—Ä–∏
  merged.summary = analyses.map(a => a.summary).join(' ')

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π sentiment –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
  const sentiments = analyses.map(a => a.sentiment)
  const sentimentCounts = {
    positive: sentiments.filter(s => s === 'positive').length,
    neutral: sentiments.filter(s => s === 'neutral').length,
    negative: sentiments.filter(s => s === 'negative').length
  }
  
  // –ù–∞—Ö–æ–¥–∏–º sentiment —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
  let maxCount = 0
  let dominantSentiment: 'positive' | 'neutral' | 'negative' = 'neutral'
  
  Object.entries(sentimentCounts).forEach(([sentiment, count]) => {
    if (count > maxCount) {
      maxCount = count
      dominantSentiment = sentiment as 'positive' | 'neutral' | 'negative'
    }
  })
  
  merged.sentiment = dominantSentiment

  return merged
}

export async function POST(request: Request) {
  console.log('üì• Got analyze request')

  try {
    const { chat_id } = await request.json()
    console.log('üîç Got chat_id:', chat_id)

    if (!chat_id) {
      console.error('‚ùå chat_id is missing')
      return NextResponse.json({ error: 'chat_id is required' }, { 
        status: 400,
        headers: corsHeaders
      })
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Yandex Cloud
    console.log('üöÄ Fetching from Yandex Cloud for chat:', chat_id)
    const yandexUrl = `https://functions.yandexcloud.net/d4em009uqs3tbu0k3ogl?chat_id=${chat_id}`
    const historyResponse = await fetch(yandexUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Api-Key ${process.env.YANDEX_API_KEY}`,
        'Content-Type': 'application/json'
      },
      signal: AbortSignal.timeout(30000)
    })

    if (!historyResponse.ok) {
      const text = await historyResponse.text()
      console.error('‚ùå Yandex API error:', {
        status: historyResponse.status,
        statusText: historyResponse.statusText,
        response: text
      })
      return NextResponse.json({ 
        error: 'Failed to fetch chat history',
        details: `API returned ${historyResponse.status} ${historyResponse.statusText}`,
        response: text
      }, { 
        status: historyResponse.status,
        headers: corsHeaders
      })
    }

    const history = await historyResponse.json()
    console.log('‚úÖ Got history from Yandex')

    // 2. –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —á–∞–Ω–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π
    console.log('üß† Analyzing with DeepSeek')
    const chunks = chunkHistory(history.messages || [], 50)
    console.log(`üì¶ Split history into ${chunks.length} chunks`)

    const analyses = []
    for (let i = 0; i < chunks.length; i++) {
      console.log(`üîÑ Analyzing chunk ${i + 1}/${chunks.length}`)
      try {
        const analysis = await analyzeChunk(chunks[i])
        analyses.push(analysis)
      } catch (error) {
        console.error(`‚ùå Error analyzing chunk ${i + 1}:`, error)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —á–∞–Ω–∫–æ–º
      }
    }

    if (analyses.length === 0) {
      throw new Error('Failed to analyze any chunks')
    }

    // 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    console.log('üîÑ Merging analyses')
    const mergedAnalysis = mergeAnalysis(analyses)

    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
    console.log('üíæ Saving to Supabase')
    const cookieStore = cookies()
    const supabase = createClient(cookieStore)

    const { error: supabaseError } = await supabase
      .from('contacts_userbot_leo')
      .update({ 
        history: {
          raw: history,
          analysis: mergedAnalysis
        },
        summary: mergedAnalysis
      })
      .eq('user_id', chat_id)

    if (supabaseError) {
      console.error('‚ùå Supabase error:', supabaseError)
      return NextResponse.json({ 
        error: 'Failed to save analysis',
        details: supabaseError.message
      }, { 
        status: 500,
        headers: corsHeaders
      })
    }

    console.log('‚úÖ Saved to Supabase')

    return NextResponse.json({
      success: true,
      summary: mergedAnalysis,
      history: {
        raw: history,
        analysis: mergedAnalysis
      }
    }, {
      headers: corsHeaders
    })

  } catch (error: unknown) {
    console.error('‚ùå Error in API route:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    return NextResponse.json(
      { error: 'Failed to analyze chat history', details: errorMessage }, 
      { 
        status: 500,
        headers: corsHeaders
      }
    )
  }
} 