import { NextResponse } from 'next/server'
import { createClient } from '@/utils/supabase/server'
import { cookies } from 'next/headers'

if (!process.env.YANDEX_API_KEY) {
  console.error('‚ùå YANDEX_API_KEY is not set')
  throw new Error('YANDEX_API_KEY is not set in environment variables')
}

if (!process.env.DEEPSEEK_API_KEY) {
  console.error('‚ùå DEEPSEEK_API_KEY is not set')
  throw new Error('DEEPSEEK_API_KEY is not set in environment variables')
}

export async function POST(request: Request) {
  console.log('üì• Got analyze request')

  try {
    const { chat_id } = await request.json()
    console.log('üîç Got chat_id:', chat_id)

    if (!chat_id) {
      console.error('‚ùå chat_id is missing')
      return NextResponse.json({ error: 'chat_id is required' }, { status: 400 })
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Yandex Cloud
    console.log('üöÄ Fetching from Yandex Cloud for chat:', chat_id)
    const yandexUrl = `https://functions.yandexcloud.net/d4em009uqs3tbu0k3ogl?chat_id=${chat_id}`
    const historyResponse = await fetch(yandexUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Api-Key ${process.env.YANDEX_API_KEY}`,
        'Content-Type': 'application/json'
      }
    })

    if (!historyResponse.ok) {
      const text = await historyResponse.text()
      console.error('‚ùå Yandex API error:', {
        status: historyResponse.status,
        statusText: historyResponse.statusText,
        response: text
      })
      return NextResponse.json({ 
        error: 'Failed to fetch chat history',
        details: `API returned ${historyResponse.status} ${historyResponse.statusText}`,
        response: text
      }, { status: historyResponse.status })
    }

    const history = await historyResponse.json()
    console.log('‚úÖ Got history from Yandex')

    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ DeepSeek
    console.log('üß† Analyzing with DeepSeek')
    const deepseekResponse = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "deepseek-chat",
        response_format: {
          type: 'json_object'
        },
        messages: [
          {
            role: "system",
            content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "summary": "–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –±–µ—Å–µ–¥—ã",
  "topics": ["–ú–∞—Å—Å–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö —Ç–µ–º"],
  "sentiment": "–û–±—â–∏–π —Ç–æ–Ω –±–µ—Å–µ–¥—ã (positive/neutral/negative)",
  "actionItems": ["–ú–∞—Å—Å–∏–≤ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ –¥–µ–ª –Ω–∞ –±—É–¥—É—â–µ–µ"],
  "participants": {
    "roles": ["–†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã"],
    "interests": ["–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    "communicationStyle": ["–°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–∏–∑—É–∞–ª/–∞—É–¥–∏–∞–ª/–∫–∏–Ω–µ—Å—Ç–µ—Ç/–¥–∏–≥–∏—Ç–∞–ª)"]
  },
  "context": {
    "type": "–¢–∏–ø –±–µ—Å–µ–¥—ã (–¥–µ–ª–æ–≤–∞—è/–ª–∏—á–Ω–∞—è/—Å–º–µ—à–∞–Ω–Ω–∞—è)",
    "mainGoal": "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
    "technologies": ["–£–ø–æ–º—è–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–ø—Ä–æ–¥—É–∫—Ç—ã/–∫–æ–º–ø–∞–Ω–∏–∏"]
  },
  "psychologicalAspects": {
    "values": ["–ö–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"],
    "mood": "–û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã"
  },
  "businessAnalysis": {
    "strengths": ["–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞"],
    "risks": ["–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏"],
    "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º"]
  },
  "conclusions": {
    "achieved": ["–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"],
    "pending": ["–ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"],
    "nextSteps": ["–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"]
  }
}

–û–±—Ä–∞—Ç–∏ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
1. –†–æ–ª–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
2. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –æ–±—â–µ–Ω–∏—è
3. –î–µ–ª–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–ª–∞–Ω—ã
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ.`
          },
          {
            role: "user",
            content: JSON.stringify(history)
          }
        ]
      })
    })

    if (!deepseekResponse.ok) {
      const text = await deepseekResponse.text()
      console.error('‚ùå DeepSeek API error:', {
        status: deepseekResponse.status,
        statusText: deepseekResponse.statusText,
        response: text
      })
      return NextResponse.json({ 
        error: 'Failed to analyze chat history',
        details: `API returned ${deepseekResponse.status} ${deepseekResponse.statusText}`,
        response: text
      }, { status: deepseekResponse.status })
    }

    const analysis = await deepseekResponse.json()
    const summary = analysis.choices[0].message.content
    console.log('‚úÖ Got analysis from DeepSeek')

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
    console.log('üíæ Saving to Supabase')
    const cookieStore = cookies()
    const supabase = createClient(cookieStore)

    const { error: supabaseError } = await supabase
      .from('contacts_userbot_leo')
      .update({ 
        history: {
          raw: history,
          analysis: analysis
        },
        summary: summary
      })
      .eq('user_id', chat_id)

    if (supabaseError) {
      console.error('‚ùå Supabase error:', supabaseError)
      return NextResponse.json({ 
        error: 'Failed to save analysis',
        details: supabaseError.message
      }, { status: 500 })
    }

    console.log('‚úÖ Saved to Supabase')

    return NextResponse.json({
      success: true,
      summary,
      history: {
        raw: history,
        analysis
      }
    })

  } catch (error: unknown) {
    console.error('‚ùå Error in API route:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    return NextResponse.json(
      { error: 'Failed to analyze chat history', details: errorMessage }, 
      { status: 500 }
    )
  }
} 