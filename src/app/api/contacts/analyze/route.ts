import { NextResponse } from 'next/server'
import { createClient } from '@/utils/supabase/server'
import { cookies } from 'next/headers'

// –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥ (–ª–∏–º–∏—Ç Vercel)
export const maxDuration = 60;

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –¥–ª—è CORS
export async function OPTIONS() {
  return NextResponse.json({}, { headers: corsHeaders })
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ DEEPSEEK_API_KEY, –∫–æ—Ç–æ—Ä—ã–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
if (!process.env.DEEPSEEK_API_KEY) {
  console.error('‚ùå DEEPSEEK_API_KEY is not set')
  throw new Error('DEEPSEEK_API_KEY is not set in environment variables')
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ YANDEX_API_KEY —Ç–µ–ø–µ—Ä—å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–±–æ—Ä–∫—É
const yandexApiKeyExists = !!process.env.YANDEX_API_KEY;
if (!yandexApiKeyExists) {
  console.warn('‚ö†Ô∏è YANDEX_API_KEY is not set - some features may be unavailable')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —á–∞–Ω–∫–∏
function chunkHistory(history: any[], chunkSize: number = 50) {
  const chunks = []
  for (let i = 0; i < history.length; i += chunkSize) {
    chunks.push(history.slice(i, i + chunkSize))
  }
  return chunks
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
async function analyzeChunk(chunk: any[]) {
  const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
      'Content-Type': 'application/json'
    },
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 2 –º–∏–Ω—É—Ç
    signal: AbortSignal.timeout(120000),
    body: JSON.stringify({
      model: "deepseek-chat",
      response_format: {
        type: 'json_object'
      },
      messages: [
        {
          role: "system",
          content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "summary": "–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –±–µ—Å–µ–¥—ã",
  "topics": ["–ú–∞—Å—Å–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–∞–µ–º—ã—Ö —Ç–µ–º"],
  "sentiment": "–û–±—â–∏–π —Ç–æ–Ω –±–µ—Å–µ–¥—ã (positive/neutral/negative)",
  "actionItems": ["–ú–∞—Å—Å–∏–≤ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∑–∞–¥–∞—á –∏–ª–∏ –¥–µ–ª –Ω–∞ –±—É–¥—É—â–µ–µ"],
  "participants": {
    "roles": ["–†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã"],
    "interests": ["–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    "communicationStyle": ["–°—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–∏–∑—É–∞–ª/–∞—É–¥–∏–∞–ª/–∫–∏–Ω–µ—Å—Ç–µ—Ç/–¥–∏–≥–∏—Ç–∞–ª)"]
  },
  "context": {
    "type": "–¢–∏–ø –±–µ—Å–µ–¥—ã (–¥–µ–ª–æ–≤–∞—è/–ª–∏—á–Ω–∞—è/—Å–º–µ—à–∞–Ω–Ω–∞—è)",
    "mainGoal": "–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
    "technologies": ["–£–ø–æ–º—è–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–ø—Ä–æ–¥—É–∫—Ç—ã/–∫–æ–º–ø–∞–Ω–∏–∏"]
  },
  "psychologicalAspects": {
    "values": ["–ö–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    "motivations": ["–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"],
    "mood": "–û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–µ—Å–µ–¥—ã"
  },
  "businessAnalysis": {
    "strengths": ["–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞"],
    "risks": ["–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏"],
    "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º"]
  },
  "conclusions": {
    "achieved": ["–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"],
    "pending": ["–ù–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"],
    "nextSteps": ["–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"]
  }
}`
        },
        {
          role: "user",
          content: JSON.stringify(chunk)
        }
      ],
      temperature: 0.5,
      max_tokens: 2048,
      top_p: 1
    })
  })

  if (!response.ok) {
    const errorText = await response.text()
    console.error('‚ùå DeepSeek API error:', {
      status: response.status,
      statusText: response.statusText,
      errorText
    })
    throw new Error(`DeepSeek API error: ${response.status} ${response.statusText}`)
  }

  const data = await response.json()
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const content = data.choices[0].message.content
    return JSON.parse(content)
  } catch (error) {
    console.error('‚ùå Failed to parse DeepSeek response:', error)
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    return data.choices[0].message.content
  }
}

// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
function combineAnalyses(analyses: any[]) {
  // –ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (analyses.length === 1) return analyses[0]

  // –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
  if (analyses.every(a => typeof a === 'string')) {
    return analyses.join('\n\n')
  }

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª—é—á–∏ –∏–∑ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
  const combined: any = {
    summary: analyses.map(a => a.summary).filter(Boolean).join('\n\n'),
    topics: Array.from(new Set(analyses.flatMap(a => a.topics || []))),
    sentiment: analyses[analyses.length - 1]?.sentiment || 'neutral',
    actionItems: Array.from(new Set(analyses.flatMap(a => a.actionItems || []))),
    participants: {
      roles: Array.from(new Set(analyses.flatMap(a => a.participants?.roles || []))),
      interests: Array.from(new Set(analyses.flatMap(a => a.participants?.interests || []))),
      communicationStyle: Array.from(new Set(analyses.flatMap(a => a.participants?.communicationStyle || [])))
    },
    context: {
      type: analyses[analyses.length - 1]?.context?.type || 'mixed',
      mainGoal: analyses[analyses.length - 1]?.context?.mainGoal || '',
      technologies: Array.from(new Set(analyses.flatMap(a => a.context?.technologies || [])))
    },
    psychologicalAspects: {
      values: Array.from(new Set(analyses.flatMap(a => a.psychologicalAspects?.values || []))),
      motivations: Array.from(new Set(analyses.flatMap(a => a.psychologicalAspects?.motivations || []))),
      mood: analyses[analyses.length - 1]?.psychologicalAspects?.mood || 'neutral'
    },
    businessAnalysis: {
      strengths: Array.from(new Set(analyses.flatMap(a => a.businessAnalysis?.strengths || []))),
      risks: Array.from(new Set(analyses.flatMap(a => a.businessAnalysis?.risks || []))),
      recommendations: Array.from(new Set(analyses.flatMap(a => a.businessAnalysis?.recommendations || [])))
    },
    conclusions: {
      achieved: Array.from(new Set(analyses.flatMap(a => a.conclusions?.achieved || []))),
      pending: Array.from(new Set(analyses.flatMap(a => a.conclusions?.pending || []))),
      nextSteps: Array.from(new Set(analyses.flatMap(a => a.conclusions?.nextSteps || [])))
    }
  }

  return combined
}

export async function POST(request: Request) {
  console.log('üì• Got analyze request')

  try {
    const { chat_id } = await request.json()
    console.log('üîç Got chat_id:', chat_id)

    if (!chat_id) {
      console.error('‚ùå chat_id is missing')
      return NextResponse.json({ error: 'chat_id is required' }, { 
        status: 400,
        headers: corsHeaders
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ YANDEX_API_KEY –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
    if (!yandexApiKeyExists) {
      return NextResponse.json({ 
        error: 'YANDEX_API_KEY is not configured',
        details: 'The Yandex API key is required for this endpoint but is not set in the environment variables.'
      }, { 
        status: 503, // Service Unavailable
        headers: corsHeaders
      })
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Yandex Cloud
    console.log('üöÄ Fetching from Yandex Cloud for chat:', chat_id)
    const yandexUrl = `https://functions.yandexcloud.net/d4em009uqs3tbu0k3ogl?chat_id=${chat_id}`
    const historyResponse = await fetch(yandexUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Api-Key ${process.env.YANDEX_API_KEY}`,
        'Content-Type': 'application/json'
      },
      signal: AbortSignal.timeout(30000)
    })

    if (!historyResponse.ok) {
      const text = await historyResponse.text()
      console.error('‚ùå Yandex API error:', {
        status: historyResponse.status,
        statusText: historyResponse.statusText,
        response: text
      })
      return NextResponse.json({ 
        error: 'Failed to fetch chat history',
        details: `API returned ${historyResponse.status} ${historyResponse.statusText}`,
        response: text
      }, { 
        status: historyResponse.status,
        headers: corsHeaders
      })
    }

    const history = await historyResponse.json()
    console.log('‚úÖ Got history from Yandex')

    // 2. –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —á–∞–Ω–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π
    console.log('üß† Analyzing with DeepSeek')
    const chunks = chunkHistory(history.messages || [], 50)
    console.log(`üì¶ Split history into ${chunks.length} chunks`)

    const analyses = []
    for (let i = 0; i < chunks.length; i++) {
      console.log(`üîÑ Analyzing chunk ${i + 1}/${chunks.length}`)
      const chunk = chunks[i]
      const analysis = await analyzeChunk(chunk)
      analyses.push(analysis)
    }

    // 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
    console.log('üîÑ Combining analyses')
    const combinedAnalysis = combineAnalyses(analyses)

    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üíæ Saving analysis to Supabase')
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–ø–µ—Ä–∫–ª–∏–µ–Ω—Ç
    const cookieStore = cookies()
    const supabase = createClient(cookieStore)
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { error: dbError } = await supabase
      .from('contact_analyses')
      .upsert({
        contact_id: chat_id,
        analysis: combinedAnalysis,
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'contact_id'
      })

    if (dbError) {
      console.error('‚ùå Database error:', dbError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    } else {
      console.log('‚úÖ Analysis saved successfully')
    }

    // 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    console.log('üì§ Returning analysis')
    return NextResponse.json({ 
      success: true,
      analysis: combinedAnalysis
    }, {
      headers: corsHeaders
    })

  } catch (error) {
    console.error('‚ùå Analysis error:', error)
    return NextResponse.json({ 
      error: 'Failed to analyze chat',
      details: error instanceof Error ? error.message : String(error)
    }, { 
      status: 500,
      headers: corsHeaders
    })
  }
} 