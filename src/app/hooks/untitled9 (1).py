# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1us8EcsNbFiIM6s3Uhw0Mdp9asK-OQvEQ

TODAY CARD
"""

import { motion } from 'framer-motion'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'

interface MeditationSession {
  id: number
  user_id: string
  date: string
  type: string
  duration: number
  completed: boolean
  created_at: string
}

interface TodayCardProps {
  todayStats: {
    morning?: MeditationSession
    evening?: MeditationSession
  }
  onStartMeditation: () => void
}

export function TodayCard({ todayStats, onStartMeditation }: TodayCardProps) {
  const today = new Date()
  const showEvening = todayStats.morning?.completed

  return (
    <motion.div
      initial={{ scale: 0.9, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      transition={{ type: "spring", stiffness: 100 }}
      className="bg-gradient-to-br from-gray-900/40 to-gray-800/40 backdrop-blur-sm
        rounded-3xl p-8 border border-white/5 shadow-2xl"
    >
      <div className="text-center mb-8">
        <motion.h2
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-4xl font-light tracking-wide text-white/90"
        >
          {format(today, 'd MMMM', { locale: ru })}
        </motion.h2>
      </div>

      <div className="grid grid-cols-2 gap-6">
        <motion.div
          whileHover={{ scale: 1.02, backgroundColor: 'rgba(255,255,255,0.03)' }}
          className="relative overflow-hidden rounded-2xl p-6 cursor-pointer
            border border-white/5 transition-colors duration-300"
          onClick={() => !todayStats.morning?.completed && onStartMeditation()}
        >
          <div className="absolute inset-0 bg-gradient-to-br from-amber-500/20 to-orange-400/5" />
          <div className="absolute inset-0 bg-gradient-to-tr from-yellow-500/10 via-amber-400/10 to-transparent" />

          <div className="relative">
            <div className="flex items-center justify-between mb-6">
              <div className="relative w-12 h-12">
                <motion.div
                  animate={{
                    scale: [1, 1.4, 1],
                    opacity: [0.3, 0.5, 0.3]
                  }}
                  transition={{
                    duration: 3,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute inset-0 bg-gradient-to-r
                    from-amber-300/40 via-yellow-300/40 to-orange-300/40
                    rounded-full blur-xl"
                />

                <motion.div
                  animate={{
                    scale: [1, 1.2, 1],
                    opacity: [0.5, 0.8, 0.5]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute inset-0 bg-gradient-to-r
                    from-amber-400/60 via-yellow-400/60 to-orange-400/60
                    rounded-full blur-lg"
                />

                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{
                    duration: 60,
                    repeat: Infinity,
                    ease: "linear"
                  }}
                  className="relative z-10 w-full h-full"
                >
                  <div className="absolute inset-0 flex items-center justify-center">
                    <svg
                      className="w-8 h-8 text-amber-300"
                      viewBox="0 0 24 24"
                      fill="currentColor"
                    >
                      <motion.g
                        animate={{
                          scale: [1, 1.1, 1],
                          opacity: [1, 0.8, 1]
                        }}
                        transition={{
                          duration: 2,
                          repeat: Infinity,
                          ease: "easeInOut"
                        }}
                      >
                        <circle cx="12" cy="12" r="4" />
                        <path d="M12 1v2m0 18v2M4.22 4.22l1.42 1.42m12.72 12.72l1.42 1.42M1 12h2m18 0h2M4.22 19.78l1.42-1.42m12.72-12.72l1.42-1.42"/>
                      </motion.g>
                    </svg>
                  </div>
                </motion.div>

                {[...Array(3)].map((_, i) => (
                  <motion.div
                    key={i}
                    animate={{
                      scale: [1, 1.5, 1],
                      opacity: [0, 0.3, 0],
                      x: [0, (i - 1) * 10],
                      y: [0, (i - 1) * -10]
                    }}
                    transition={{
                      duration: 2,
                      delay: i * 0.3,
                      repeat: Infinity,
                      ease: "easeOut"
                    }}
                    className="absolute top-1/2 left-1/2 w-2 h-2
                      bg-yellow-200/40 rounded-full blur-sm"
                    style={{
                      transformOrigin: 'center'
                    }}
                  />
                ))}
              </div>

              <div className="space-y-1 text-right">
                <span className="text-sm font-light tracking-wider text-white/70">Утро</span>
                {todayStats.morning?.completed && (
                  <motion.div
                    initial={{ opacity: 0, x: -10 }}
                    animate={{ opacity: 1, x: 0 }}
                    className="text-xs font-light text-emerald-400/80"
                  >
                    Выполнено ✓
                  </motion.div>
                )}
              </div>
            </div>

            <div className="relative space-y-3">
              <div className="h-3 rounded-full bg-white/5 overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${(todayStats.morning?.duration || 0) / 60 * 100}%` }}
                  transition={{ duration: 1, ease: "easeOut" }}
                  className="h-full bg-gradient-to-r from-amber-400/60 via-yellow-400/60 to-orange-400/60
                    relative group"
                >
                  <motion.div
                    animate={{
                      opacity: [0.4, 0.7, 0.4],
                      width: ['100%', '120%', '100%']
                    }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                    className="absolute top-0 bottom-0 left-0
                      bg-gradient-to-r from-transparent via-white/30 to-transparent
                      skew-x-12 -translate-x-full"
                  />
                </motion.div>
              </div>
              <div className="flex items-center justify-between text-xs font-light tracking-wider">
                <span className="text-white/40">Прогресс</span>
                <span className="text-white/40">
                  {todayStats.morning?.duration || 0}/60 мин
                </span>
              </div>
            </div>
          </div>
        </motion.div>

        {showEvening && (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            whileHover={{ scale: 1.02, backgroundColor: 'rgba(255,255,255,0.03)' }}
            className="relative overflow-hidden rounded-2xl p-6 cursor-pointer
              border border-white/5 transition-colors duration-300"
            onClick={() => !todayStats.evening?.completed && onStartMeditation()}
          >
            <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-transparent" />

            <div className="relative">
              <div className="flex items-center justify-between mb-6">
                <div className="relative">
                  <motion.div
                    animate={{
                      scale: [1, 1.3, 1],
                      opacity: [0.3, 0.5, 0.3]
                    }}
                    transition={{
                      duration: 4,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                    className="absolute inset-0 bg-gradient-to-r
                      from-blue-400/20 to-cyan-400/20
                      rounded-full blur-xl"
                  />
                  <motion.div
                    animate={{
                      rotate: [-5, 5, -5]
                    }}
                    transition={{
                      duration: 6,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                    className="relative z-10"
                  >
                    <svg
                      className="w-8 h-8 text-blue-400/80"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313-12.454z"/>
                    </svg>
                  </motion.div>
                </div>
                <div className="space-y-1 text-right">
                  <span className="text-sm font-light tracking-wider text-white/70">Вечер</span>
                  {todayStats.evening?.completed && (
                    <motion.div
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="text-xs font-light text-emerald-400/80"
                    >
                      Выполнено ✓
                    </motion.div>
                  )}
                </div>
              </div>

              <div className="relative space-y-3">
                <div className="h-2 rounded-full bg-white/5 overflow-hidden">
                  <motion.div
                    initial={{ width: 0 }}
                    animate={{ width: `${(todayStats.evening?.duration || 0) / 60 * 100}%` }}
                    transition={{ duration: 1, ease: "easeOut" }}
                    className="h-full bg-gradient-to-r from-blue-400/50 to-cyan-400/50"
                  />
                </div>
                <div className="flex items-center justify-between text-xs font-light tracking-wider">
                  <span className="text-white/40">Прогресс</span>
                  <span className="text-white/40">
                    {todayStats.evening?.duration || 0}/60 мин
                  </span>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </div>
    </motion.div>
  )
}

"""CAL GRID"""

import { motion } from 'framer-motion'
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isToday } from 'date-fns'
import { ru } from 'date-fns/locale'

interface MeditationSession {
  id: number
  user_id: string
  date: string
  type: string
  duration: number
  completed: boolean
  created_at: string
}

interface DayStats {
  morning?: MeditationSession
  evening?: MeditationSession
}

interface CalendarGridProps {
  currentDate: Date
  sessions: MeditationSession[]
  onPrevMonth: () => void
  onNextMonth: () => void
}

export function MeditationCalendarGrid({
  currentDate,
  sessions,
  onPrevMonth,
  onNextMonth
}: CalendarGridProps) {
  // Группируем сессии по дням
  const getDayStats = (date: Date): DayStats => {
    const dayStr = format(date, 'yyyy-MM-dd')
    const daySessions = sessions.filter(s => s.date === dayStr)
    return {
      morning: daySessions.find(s => s.type === 'morning'),
      evening: daySessions.find(s => s.type === 'evening')
    }
  }

  // Получаем дни для отображения
  const monthStart = startOfMonth(currentDate)
  const monthEnd = endOfMonth(currentDate)
  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd })

  return (
    <div className="bg-gray-800/40 backdrop-blur-xl rounded-2xl p-8 border border-gray-700/50">
      <div className="flex items-center justify-between mb-8">
        <motion.button
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
          onClick={onPrevMonth}
          className="p-3 rounded-xl bg-gray-700/50 hover:bg-gray-600/50 transition-colors"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7"/>
          </svg>
        </motion.button>
        <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400">
          {format(currentDate, 'LLLL yyyy', { locale: ru })}
        </h2>
        <motion.button
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
          onClick={onNextMonth}
          className="p-3 rounded-xl bg-gray-700/50 hover:bg-gray-600/50 transition-colors"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7"/>
          </svg>
        </motion.button>
      </div>

      <div className="grid grid-cols-4 gap-4">
        {daysInMonth.map(date => {
          const dayStats = getDayStats(date)
          const isCurrentMonth = isSameMonth(date, currentDate)
          const isTodayDate = isToday(date)

          return (
            <motion.div
              key={date.toISOString()}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: isCurrentMonth ? 1 : 0.3, y: 0 }}
              transition={{ duration: 0.3 }}
              className={`
                p-4 rounded-xl border cursor-pointer
                ${isCurrentMonth ? 'border-gray-700/50 bg-gray-800/50' : 'border-transparent bg-transparent'}
                ${isTodayDate ? 'ring-2 ring-purple-500 ring-offset-2 ring-offset-gray-900' : ''}
                hover:bg-gray-700/50 transition-all duration-200
              `}
            >
              <div className="text-lg font-medium mb-3 text-center text-gray-300">
                {format(date, 'd')}
              </div>

              <div className="space-y-3">
                <div>
                  <div className="h-2.5 rounded-full bg-gray-700/50 overflow-hidden">
                    <motion.div
                      initial={{ width: 0 }}
                      animate={{ width: `${(dayStats.morning?.duration || 0) / 60 * 100}%` }}
                      transition={{ duration: 0.5 }}
                      className="h-full bg-gradient-to-r from-yellow-500 to-orange-500"
                    />
                  </div>
                </div>

                <div>
                  <div className="h-2.5 rounded-full bg-gray-700/50 overflow-hidden">
                    <motion.div
                      initial={{ width: 0 }}
                      animate={{ width: `${(dayStats.evening?.duration || 0) / 60 * 100}%` }}
                      transition={{ duration: 0.5 }}
                      className="h-full bg-gradient-to-r from-blue-500 to-cyan-500"
                    />
                  </div>
                </div>
              </div>
            </motion.div>
          )
        })}
      </div>
    </div>
  )
}

"""CALENDAR

"""

'use client'

import { useState, useEffect, useCallback } from 'react'
import { createClient } from '@/utils/supabase/client'
import { format, addMonths, subMonths, startOfMonth, endOfMonth, startOfWeek, endOfWeek } from 'date-fns'
import { ru } from 'date-fns/locale'
import { MeditationModal } from './MeditationModal'
import { MeditationStats } from './MeditationStats'
import { MeditationCalendarGrid } from './MeditationCalendarGrid'
import { TodayCard } from './TodayCard'

interface MeditationSession {
  id: number
  user_id: string
  date: string
  type: string
  duration: number
  completed: boolean
  created_at: string
}

interface DayStats {
  morning?: MeditationSession
  evening?: MeditationSession
}

export function MeditationCalendar() {
  const [currentDate, setCurrentDate] = useState(new Date())
  const [sessions, setSessions] = useState<MeditationSession[]>([])
  const [weeklyStats, setWeeklyStats] = useState({ total: 0, sessions: 0 })
  const [monthlyStats, setMonthlyStats] = useState({ total: 0, sessions: 0 })
  const [showMeditationModal, setShowMeditationModal] = useState(false)
  const [isTimerActive, setIsTimerActive] = useState(false)
  const [timeLeft, setTimeLeft] = useState(3600)
  const [todaySessions, setTodaySessions] = useState<MeditationSession[]>([])
  const [currentSessionId, setCurrentSessionId] = useState<number | null>(null)
  const supabase = createClient()

  // Восстанавливаем сессию при загрузке
  useEffect(() => {
    const savedSession = localStorage.getItem('currentMeditationSession')
    if (savedSession) {
      const { sessionId, endTime, type } = JSON.parse(savedSession)
      const now = new Date().getTime()
      const timeLeftMs = endTime - now

      if (timeLeftMs > 0) {
        setCurrentSessionId(sessionId)
        setTimeLeft(Math.floor(timeLeftMs / 1000))
        setIsTimerActive(true)
        setShowMeditationModal(true)
      } else {
        // Если время вышло, обновляем длительность в БД
        const duration = 60
        supabase
          .from('meditation_sessions')
          .update({
            duration,
            completed: true
          })
          .eq('id', sessionId)
          .then(() => {
            fetchSessions()
            localStorage.removeItem('currentMeditationSession')
          })
      }
    }
  }, [])

  // Сохраняем состояние сессии перед закрытием
  useEffect(() => {
    const handleBeforeUnload = () => {
      if (isTimerActive && currentSessionId) {
        const endTime = new Date().getTime() + timeLeft * 1000
        localStorage.setItem('currentMeditationSession', JSON.stringify({
          sessionId: currentSessionId,
          endTime,
          type: todaySessions.length === 0 ? 'morning' : 'evening'
        }))
      }
    }

    window.addEventListener('beforeunload', handleBeforeUnload)
    return () => window.removeEventListener('beforeunload', handleBeforeUnload)
  }, [isTimerActive, timeLeft, currentSessionId, todaySessions])

  // Получаем данные за месяц
  const fetchSessions = useCallback(async () => {
    const start = startOfMonth(currentDate)
    const end = endOfMonth(currentDate)

    const { data, error } = await supabase
      .from('meditation_sessions')
      .select('*')
      .eq('user_id', '375634162')
      .gte('date', format(start, 'yyyy-MM-dd'))
      .lte('date', format(end, 'yyyy-MM-dd'))
      .order('date')

    if (error) {
      console.error('Error fetching sessions:', error)
      return
    }

    setSessions(data || [])

    // Получаем сессии за сегодня
    const today = format(new Date(), 'yyyy-MM-dd')
    const todayData = data?.filter(s => s.date === today) || []
    setTodaySessions(todayData)

    // Считаем статистику за неделю
    const weekStart = startOfWeek(currentDate, { locale: ru })
    const weekEnd = endOfWeek(currentDate, { locale: ru })
    const weekSessions = data?.filter(s => {
      const date = new Date(s.date)
      return date >= weekStart && date <= weekEnd
    })
    setWeeklyStats({
      total: weekSessions?.reduce((sum, s) => sum + s.duration, 0) || 0,
      sessions: weekSessions?.length || 0
    })

    // Считаем статистику за месяц
    setMonthlyStats({
      total: data?.reduce((sum, s) => sum + s.duration, 0) || 0,
      sessions: data?.length || 0
    })
  }, [currentDate, supabase])

  useEffect(() => {
    fetchSessions()
  }, [fetchSessions])

  // Начать медитацию
  const startMeditation = async () => {
    try {
      console.log('Starting meditation...')
      const type = todaySessions.length === 0 ? 'morning' : 'evening'
      console.log('Session type:', type)

      // Создаем запись в БД
      const { data, error } = await supabase
        .from('meditation_sessions')
        .insert({
          user_id: '375634162',
          type,
          duration: 0,
          date: format(new Date(), 'yyyy-MM-dd'),
          completed: false
        })
        .select()
        .single()

      if (error) {
        console.error('Error creating session:', error)
        return
      }

      console.log('Session created:', data)
      setCurrentSessionId(data.id)

      // Сохраняем время окончания
      const endTime = new Date().getTime() + 3600 * 1000
      localStorage.setItem('currentMeditationSession', JSON.stringify({
        sessionId: data.id,
        endTime,
        type
      }))

      setIsTimerActive(true)
      setTimeLeft(3600)
      await fetchSessions()
      console.log('Timer started!')
    } catch (error) {
      console.error('Unexpected error:', error)
    }
  }

  // Обновляем длительность каждую минуту
  useEffect(() => {
    let interval: NodeJS.Timeout

    if (isTimerActive && timeLeft > 0 && currentSessionId) {
      console.log('Timer is active, time left:', timeLeft)
      interval = setInterval(async () => {
        setTimeLeft(prev => {
          const newTime = prev - 1
          console.log('New time:', newTime)

          // Обновляем длительность в БД каждую минуту
          if (newTime % 60 === 0) {
            const duration = 60 - Math.floor(newTime / 60)
            console.log('Updating duration:', duration)
            supabase
              .from('meditation_sessions')
              .update({
                duration: duration,
                completed: duration >= 60
              })
              .eq('id', currentSessionId)
              .then(({ error }) => {
                if (error) {
                  console.error('Error updating duration:', error)
                } else {
                  console.log('Duration updated!')
                  fetchSessions()
                }
              })
          }

          // Завершаем таймер
          if (newTime <= 0) {
            console.log('Timer finished!')
            setIsTimerActive(false)
            localStorage.removeItem('currentMeditationSession')
            const audio = new Audio('/meditation-bell.mp3')
            audio.play()
            return 0
          }

          return newTime
        })
      }, 1000)
    }

    return () => {
      if (interval) {
        console.log('Clearing interval')
        clearInterval(interval)
      }
    }
  }, [isTimerActive, timeLeft, currentSessionId, supabase, fetchSessions])

  // Отменить медитацию
  const cancelMeditation = async () => {
    if (currentSessionId) {
      await supabase
        .from('meditation_sessions')
        .delete()
        .eq('id', currentSessionId)

      setIsTimerActive(false)
      setShowMeditationModal(false)
      setCurrentSessionId(null)
      localStorage.removeItem('currentMeditationSession')
      await fetchSessions()
    }
  }

  // Группируем сессии по дням
  const getDayStats = (date: Date): DayStats => {
    const dayStr = format(date, 'yyyy-MM-dd')
    const daySessions = sessions.filter(s => s.date === dayStr)
    return {
      morning: daySessions.find(s => s.type === 'morning'),
      evening: daySessions.find(s => s.type === 'evening')
    }
  }

  const todayStats = getDayStats(new Date())

  return (
    <div className="space-y-8">
      <TodayCard
        todayStats={todayStats}
        onStartMeditation={() => setShowMeditationModal(true)}
      />

      <MeditationCalendarGrid
        currentDate={currentDate}
        sessions={sessions}
        onPrevMonth={() => setCurrentDate(subMonths(currentDate, 1))}
        onNextMonth={() => setCurrentDate(addMonths(currentDate, 1))}
      />

      <MeditationStats
        weeklyStats={weeklyStats}
        monthlyStats={monthlyStats}
      />

      <MeditationModal
        isOpen={showMeditationModal}
        onClose={() => setShowMeditationModal(false)}
        onStart={startMeditation}
        onCancel={cancelMeditation}
        isTimerActive={isTimerActive}
        timeLeft={timeLeft}
        isMorning={todaySessions.length === 0}
      />
    </div>
  )
}