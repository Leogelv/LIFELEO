'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { getUserIdFromUrl, getUsernameFromUrl } from '../hooks/useTelegram'

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface UserContextType {
  userId: number;
  username: string;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∏–ø–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const UserIdContext = createContext<UserContextType>({
  userId: 0,
  username: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useUserId = () => useContext(UserIdContext).userId
export const useUsername = () => useContext(UserIdContext).username
export const useUserContext = () => useContext(UserIdContext)

// –°–æ–∑–¥–∞–µ–º Provider –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export function UserIdProvider({ children }: { children: React.ReactNode }) {
  const [userId, setUserId] = useState<number>(0)
  const [username, setUsername] = useState<string>('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
  const [isClient, setIsClient] = useState(false)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  useEffect(() => {
    setIsClient(true)

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è userId –∏–∑ URL
    const getUserData = () => {
      const extractedUserId = getUserIdFromUrl()
      const extractedUsername = getUsernameFromUrl()
      
      console.log('üîç UserIdContext: –∏–∑–≤–ª–µ—á–µ–Ω userId –∏–∑ URL:', extractedUserId)
      console.log('üîç UserIdContext: –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–º—è –∏–∑ URL:', extractedUsername)
      
      setUserId(extractedUserId)
      setUsername(extractedUsername)
    }

    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    getUserData()

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
    if (typeof window !== 'undefined') {
      // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
      const handleRouteChange = () => {
        getUserData()
      }

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ popstate (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥)
      window.addEventListener('popstate', handleRouteChange)

      // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      let lastUrl = window.location.href
      const urlObserver = setInterval(() => {
        if (lastUrl !== window.location.href) {
          lastUrl = window.location.href
          getUserData()
        }
      }, 1000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      
      return () => {
        window.removeEventListener('popstate', handleRouteChange)
        clearInterval(urlObserver)
      }
    }
  }, [isClient])

  const contextValue: UserContextType = {
    userId,
    username
  }

  return (
    <UserIdContext.Provider value={contextValue}>
      {children}
    </UserIdContext.Provider>
  )
} 