'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Icon } from '@iconify/react'
import { supabase } from '@/utils/supabase/client'
import { toast } from 'sonner'
import { logger } from '@/utils/logger'
import { useTelegram } from '@/app/hooks/useTelegram'

interface AddHabitModalProps {
  isOpen: boolean
  onClose: () => void
  onHabitAdded: () => void
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const habitCategories = [
  { 
    id: 'water', 
    name: '–í–æ–¥–∞', 
    icon: 'solar:glass-water-bold', 
    defaultValue: 2000, 
    unit: '–º–ª',
    defaultAddValues: '100,200,300,500',
    defaultDelValues: '100,200'
  },
  { 
    id: 'sport', 
    name: '–°–ø–æ—Ä—Ç', 
    icon: 'solar:running-round-bold', 
    defaultValue: 30, 
    unit: '–º–∏–Ω',
    defaultAddValues: '15,30,45,60',
    defaultDelValues: '15,30'
  },
  { 
    id: 'meditation', 
    name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è', 
    icon: 'solar:meditation-bold', 
    defaultValue: 20, 
    unit: '–º–∏–Ω',
    defaultAddValues: '5,10,15,20',
    defaultDelValues: '5,10'
  },
  { 
    id: 'breathing', 
    name: '–î—ã—Ö–∞–Ω–∏–µ', 
    icon: 'solar:breathing-bold', 
    defaultValue: 10, 
    unit: '–º–∏–Ω',
    defaultAddValues: '3,5,7,10',
    defaultDelValues: '3,5'
  }
]

export function AddHabitModal({ isOpen, onClose, onHabitAdded }: AddHabitModalProps) {
  const [selectedCategory, setSelectedCategory] = useState(habitCategories[0])
  const [targetValue, setTargetValue] = useState(habitCategories[0].defaultValue)
  const [repeatType, setRepeatType] = useState<'daily' | 'weekly'>('daily')
  const [timeOfDay, setTimeOfDay] = useState('09:00')
  const [isLoading, setIsLoading] = useState(false)
  const { safeAreaInset, isTelegramWebApp } = useTelegram()
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è values_add, values_del –∏ measure
  const [measureUnit, setMeasureUnit] = useState(habitCategories[0].unit)
  const [valuesAdd, setValuesAdd] = useState(habitCategories[0].defaultAddValues)
  const [valuesDel, setValuesDel] = useState(habitCategories[0].defaultDelValues)
  const [showAdvanced, setShowAdvanced] = useState(false)

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  const resetForm = () => {
    setSelectedCategory(habitCategories[0])
    setTargetValue(habitCategories[0].defaultValue)
    setRepeatType('daily')
    setTimeOfDay('09:00')
    setMeasureUnit(habitCategories[0].unit)
    setValuesAdd(habitCategories[0].defaultAddValues)
    setValuesDel(habitCategories[0].defaultDelValues)
    setShowAdvanced(false)
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCategoryChange = (category: typeof habitCategories[0]) => {
    setSelectedCategory(category)
    setTargetValue(category.defaultValue)
    setMeasureUnit(category.unit)
    setValuesAdd(category.defaultAddValues)
    setValuesDel(category.defaultDelValues)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  const handleSubmit = async () => {
    setIsLoading(true)
    logger.info('üéØ –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É', { 
      category: selectedCategory.id, 
      targetValue, 
      repeatType,
      timeOfDay,
      measureUnit,
      valuesAdd,
      valuesDel
    })

    try {
      const { error } = await supabase
        .from('habits')
        .insert({
          category: selectedCategory.id,
          name: selectedCategory.name,
          target_value: targetValue,
          repeat_type: repeatType,
          time_of_day: timeOfDay,
          measure: measureUnit,
          values_add: valuesAdd,
          values_del: valuesDel
        })

      if (error) throw error

      logger.info('‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
      toast.success('–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!')
      onHabitAdded()
      onClose()
      resetForm()
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏', { error })
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"
          style={{
            paddingTop: isTelegramWebApp ? `${safeAreaInset.top}px` : '16px',
            paddingBottom: isTelegramWebApp ? `${safeAreaInset.bottom}px` : '16px',
            paddingLeft: isTelegramWebApp ? `${safeAreaInset.left}px` : '16px',
            paddingRight: isTelegramWebApp ? `${safeAreaInset.right}px` : '16px'
          }}
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            className="w-full max-w-lg bg-gray-900 rounded-2xl shadow-xl space-y-6 max-h-[90vh] overflow-y-auto"
            style={{
              padding: isTelegramWebApp ? 
                `${Math.max(16, safeAreaInset.top)}px ${Math.max(16, safeAreaInset.right)}px ${Math.max(16, safeAreaInset.bottom)}px ${Math.max(16, safeAreaInset.left)}px` : 
                '24px'
            }}
            onClick={e => e.stopPropagation()}
          >
            <h3 className="text-xl font-medium text-white">–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞</h3>

            {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div className="grid grid-cols-2 gap-3">
              {habitCategories.map(category => (
                <motion.button
                  key={category.id}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleCategoryChange(category)}
                  className={`
                    flex items-center gap-3 p-4 rounded-xl border transition-all duration-300
                    ${selectedCategory.id === category.id 
                      ? 'bg-white/10 border-white/20' 
                      : 'bg-white/5 border-white/10 hover:bg-white/10'
                    }
                  `}
                >
                  <Icon icon={category.icon} className="w-6 h-6 text-white/80" />
                  <span className="text-white/80">{category.name}</span>
                </motion.button>
              ))}
            </div>

            {/* –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */}
            <div className="space-y-2">
              <label className="text-sm text-white/60">
                –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ({measureUnit})
              </label>
              <input
                type="number"
                value={targetValue}
                onChange={e => setTargetValue(Number(e.target.value))}
                className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg 
                  text-white/80 focus:outline-none focus:border-white/20"
              />
            </div>

            {/* –í—Ä–µ–º—è –¥–Ω—è */}
            <div className="space-y-2">
              <label className="text-sm text-white/60">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
              <input
                type="time"
                value={timeOfDay}
                onChange={e => setTimeOfDay(e.target.value)}
                className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg 
                  text-white/80 focus:outline-none focus:border-white/20"
              />
            </div>

            {/* –¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è */}
            <div className="space-y-2">
              <label className="text-sm text-white/60">–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ</label>
              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={() => setRepeatType('daily')}
                  className={`
                    px-4 py-2 rounded-lg border transition-all duration-300
                    ${repeatType === 'daily' 
                      ? 'bg-white/10 border-white/20' 
                      : 'bg-white/5 border-white/10'
                    }
                  `}
                >
                  –ï–∂–µ–¥–Ω–µ–≤–Ω–æ
                </button>
                <button
                  onClick={() => setRepeatType('weekly')}
                  className={`
                    px-4 py-2 rounded-lg border transition-all duration-300
                    ${repeatType === 'weekly' 
                      ? 'bg-white/10 border-white/20' 
                      : 'bg-white/5 border-white/10'
                    }
                  `}
                >
                  –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
                </button>
              </div>
            </div>
            
            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <button
              onClick={() => setShowAdvanced(!showAdvanced)}
              className="w-full px-4 py-2 flex items-center justify-center gap-2 
                rounded-lg bg-white/5 hover:bg-white/10 
                border border-white/10 text-white/80 transition-all duration-300"
            >
              <span>{showAdvanced ? '–°–∫—Ä—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}</span>
              <Icon 
                icon={showAdvanced ? 'solar:arrow-up-linear' : 'solar:arrow-down-linear'} 
                className="w-5 h-5" 
              />
            </button>
            
            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥) */}
            {showAdvanced && (
              <>
                {/* –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è */}
                <div className="space-y-2">
                  <label className="text-sm text-white/60">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
                  <input
                    type="text"
                    value={measureUnit}
                    onChange={e => setMeasureUnit(e.target.value)}
                    placeholder="–º–ª, –º–∏–Ω, —à—Ç, –∫–º –∏ —Ç.–¥."
                    className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg 
                      text-white/80 focus:outline-none focus:border-white/20"
                  />
                </div>
                
                {/* –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
                <div className="space-y-2">
                  <label className="text-sm text-white/60">
                    –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 
                    <span className="text-white/40 ml-1">(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</span>
                  </label>
                  <input
                    type="text"
                    value={valuesAdd}
                    onChange={e => setValuesAdd(e.target.value)}
                    placeholder="100,200,300,500"
                    className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg 
                      text-white/80 focus:outline-none focus:border-white/20"
                  />
                </div>
                
                {/* –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã—á–∏—Ç–∞–Ω–∏—è */}
                <div className="space-y-2">
                  <label className="text-sm text-white/60">
                    –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã—á–∏—Ç–∞–Ω–∏—è 
                    <span className="text-white/40 ml-1">(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</span>
                  </label>
                  <input
                    type="text"
                    value={valuesDel}
                    onChange={e => setValuesDel(e.target.value)}
                    placeholder="50,100,200"
                    className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg 
                      text-white/80 focus:outline-none focus:border-white/20"
                  />
                </div>
              </>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex gap-3">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={onClose}
                className="flex-1 px-4 py-2 rounded-lg bg-white/5 hover:bg-white/10 
                  border border-white/10 text-white/80 transition-all duration-300"
              >
                –û—Ç–º–µ–Ω–∞
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={handleSubmit}
                disabled={isLoading}
                className="flex-1 px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 
                  border border-white/20 text-white font-medium transition-all duration-300"
              >
                {isLoading ? '–°–æ–∑–¥–∞–µ–º...' : '–°–æ–∑–¥–∞—Ç—å'}
              </motion.button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  )
} 