'use client'

import { supabase } from '@/utils/supabase/client'
import { useEffect, useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { format, addDays, isAfter } from 'date-fns'
import { ru } from 'date-fns/locale'
import { toast } from 'sonner'
import { UserIdContext } from '@/app/contexts/UserContext'
import { useContext } from 'react'
import { MdViewList, MdGridView, MdDoneAll, MdPendingActions, MdRefresh } from 'react-icons/md'
import { logger } from '@/utils/logger'
import { TodoCard } from '@/app/components/TodoCard'
import { EditTodoModal } from '@/app/components/EditTodoModal'
import { Todo } from '@/types/todo'
import { realtime } from '@/utils/realtime'

interface TodoListProps {
  initialTodos: Todo[]
  onTodosChange?: (todos: Todo[]) => void
  listView?: 'vertical' | 'horizontal'
  hideCompleted?: boolean
}

export default function TodoList({ 
  initialTodos, 
  onTodosChange, 
  listView: initialListView = 'vertical', 
  hideCompleted: initialHideCompleted = true 
}: TodoListProps) {
  const [todos, setTodos] = useState<Todo[]>(initialTodos)
  const [listView, setListView] = useState<'vertical' | 'horizontal'>(initialListView)
  const [isHideCompleted, setIsHideCompleted] = useState(initialHideCompleted)
  const [isLoading, setIsLoading] = useState(true)
  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null)
  const userId = useContext(UserIdContext)

  // –û–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞—à–∏ –∑–∞–¥–∞—á–∏, –∫–æ–≥–¥–∞ –º–µ–Ω—è—é—Ç—Å—è –≤—Ö–æ–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏
  useEffect(() => {
    logger.info('TodoList: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –∑–∞–¥–∞—á', { 
      count: initialTodos.length,
      tasks: initialTodos.map(t => ({ id: t.id, name: t.name, done: t.done, typeOfDone: typeof t.done }))
    });
    setTodos(initialTodos);
  }, [initialTodos]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Å–∫–æ–≤
  useEffect(() => {
    const fetchTodos = async () => {
      try {
        logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞—Å–∫–æ–≤', { userId })
        const { data, error } = await supabase
          .from('todos')
          .select('*')
          .eq('telegram_id', userId)
          .order('deadline', { ascending: true })

        if (error) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Å–∫–æ–≤', { error })
          toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏')
          return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è done, —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ—á–Ω–æ –±—ã–ª–∏ boolean
        const fixedTodos = data?.map(task => ({
          ...task,
          done: Boolean(task.done) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ true/false
        }))

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å –ë–î
        const suspiciousTasks = fixedTodos?.filter(task => {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É UI –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
          const uiTask = todos.find(t => t.id === task.id);
          return uiTask && uiTask.done !== task.done;
        });
        
        if (suspiciousTasks && suspiciousTasks.length > 0) {
          logger.warn('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ UI –∏ –ë–î:', { 
            tasks: suspiciousTasks.map(t => ({ id: t.id, name: t.name, done_in_db: t.done })) 
          });
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
          toast.warning(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (${suspiciousTasks.length}). –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–î.`);
        }

        logger.info('–¢–∞—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', { count: data?.length })
        setTodos(fixedTodos || [])
      } catch (error) {
        logger.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Å–∫–æ–≤', { error })
        toast.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
      } finally {
        setIsLoading(false)
      }
    }

    let unsubscribe: (() => void) | undefined

    if (userId) {
      fetchTodos()
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ realtime –º–µ–Ω–µ–¥–∂–µ—Ä
      unsubscribe = realtime.subscribe(`todos-${userId}`, (payload) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ç–∞—Å–∫ –∏ –Ω–∞—à userId
        const isOurTask = (
          (payload.new && 'telegram_id' in payload.new && 
           payload.new.telegram_id === userId) ||
          (payload.old && 'telegram_id' in payload.old && 
           payload.old.telegram_id === userId)
        )

        if (!isOurTask) return

        logger.info('üîÑ Realtime: –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–∞—Å–∫–∞—Ö', { 
          eventType: payload.eventType,
          task: payload.new && 'name' in payload.new ? payload.new.name : 
                payload.old && 'name' in payload.old ? payload.old.name : 'unknown',
          id: payload.new && 'id' in payload.new ? payload.new.id : 
              payload.old && 'id' in payload.old ? payload.old.id : 'unknown',
          userId: userId
        })
        
        if (!payload.new && !payload.old) {
          logger.error('üîÑ Realtime: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ')
          return
        }

        try {
          if (payload.eventType === 'INSERT') {
            logger.debug('üì• –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫', payload.new)
            setTodos(current => {
              const newTodos = sortTodos([...current, payload.new as Todo])
              logger.debug('üì• –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:', newTodos)
              return newTodos
            })
          } 
          else if (payload.eventType === 'DELETE') {
            logger.debug('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞', payload.old)
            setTodos(current => {
              const newTodos = current.filter(todo => todo.id !== payload.old.id)
              logger.debug('üóëÔ∏è –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:', newTodos)
              return newTodos
            })
          } 
          else if (payload.eventType === 'UPDATE') {
            logger.debug('‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–∫–µ', payload.new)
            setTodos(current => {
              const newTodos = sortTodos(current.map(todo => 
                todo.id === payload.new.id ? payload.new as Todo : todo
              ))
              logger.debug('‚úèÔ∏è –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:', newTodos)
              return newTodos
            })
          }
        } catch (error) {
          logger.error('üîÑ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ realtime —Å–æ–±—ã—Ç–∏—è:', error)
        }
      })
    }

    return () => {
      if (unsubscribe) {
        unsubscribe()
      }
    }
  }, [userId])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
  useEffect(() => {
    if (onTodosChange) {
      onTodosChange(todos)
    }
  }, [todos, onTodosChange])

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞—Å–∫–æ–≤
  const sortTodos = (todosToSort: Todo[]) => {
    return [...todosToSort].sort((a, b) => new Date(a.deadline).getTime() - new Date(b.deadline).getTime())
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ done
  const filteredTodos = sortTodos(todos.filter(todo => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ done —Ç–æ—á–Ω–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –∫ boolean —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    const isDone = todo.done === true;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –ø–æ–ª—è done
    if (typeof todo.done !== 'boolean') {
      logger.warn('–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º done:', {
        id: todo.id,
        name: todo.name,
        done: todo.done,
        typeOfDone: typeof todo.done
      });
    }
    
    if (isHideCompleted) {
      return !isDone; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    }
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    return isDone; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
  }));

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  logger.debug('TodoList: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
    allCount: todos.length,
    filteredCount: filteredTodos.length,
    filtered: filteredTodos.map(t => ({ id: t.id, name: t.name, done: t.done }))
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  const handleToggle = async (id: string) => {
    const todo = todos.find(t => t.id === id)
    if (!todo) return

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º done –∫ —Å—Ç—Ä–æ–≥–æ–º—É boolean –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Ä—Å–∏–µ–π
    const currentDone = todo.done === true;
    const newDone = !currentDone;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', { 
      id, 
      name: todo.name,
      currentDone,
      newDone,
      originalDone: todo.done,
      typeOfOriginalDone: typeof todo.done
    });

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    setTodos(prev => prev.map(t => 
      t.id === id ? { ...t, done: newDone } : t
    ))

    try {
      logger.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', { id, newStatus: newDone })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ sent_done —Ä–µ–∞–ª—å–Ω–æ boolean
      const sent_done = Boolean(newDone);
      
      const { error, data } = await supabase
        .from('todos')
        .update({ done: sent_done })
        .eq('id', id)
        .select('*')

      if (error) throw error

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (data && data.length > 0) {
        const returnedDone = data[0].done;
        logger.info('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î:', { 
          id, 
          done: newDone, 
          returnedDone: returnedDone,
          typeOfReturnedDone: typeof returnedDone,
          match: (returnedDone === true) === newDone,
          response: data 
        });
        
        if ((returnedDone === true) !== newDone) {
          logger.warn('–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î:', {
            id,
            requested: newDone,
            received: returnedDone
          });
          
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
          setTodos(prev => prev.map(t => 
            t.id === id ? { ...t, done: returnedDone === true } : t
          ));
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      toast.success(
        <div className="flex items-center gap-2">
          <MdDoneAll className="w-5 h-5" />
          <div>
            <div className="font-medium">{todo.name}</div>
            <div className="text-sm opacity-80">
              {!newDone ? '–ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞' : '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!'}
            </div>
          </div>
        </div>
      )

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', { error })
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      setTodos(prev => prev.map(t => 
        t.id === id ? { ...t, done: currentDone } : t
      ))
    }
  }

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Å–∫–∞
  const handleEdit = (todo: Todo) => {
    setSelectedTodo(todo)
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = (updatedTodo: Todo) => {
    setTodos(current => 
      current.map(todo => 
        todo.id === updatedTodo.id ? updatedTodo : todo
      )
    )
    setSelectedTodo(null)
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Å–∫–∞
  const handleDelete = async (id: string) => {
    try {
      const { error } = await supabase
        .from('todos')
        .delete()
        .eq('id', id)
        .eq('telegram_id', userId)

      if (error) {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
        return
      }

      setTodos(current => current.filter(todo => todo.id !== id))
      toast.success('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')
    } catch (error) {
      console.error('Error:', error)
      toast.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î
  const syncWithDatabase = async () => {
    if (!userId) return;
    
    setIsLoading(true);
    
    try {
      logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î');
      
      const { data, error } = await supabase
        .from('todos')
        .select('*')
        .eq('telegram_id', userId)
        .order('deadline', { ascending: true });
        
      if (error) {
        throw error;
      }
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
      const localTasks = [...todos];
      const remoteTasks = data ? data.map(task => ({
        ...task,
        done: task.done === true // –°—Ç—Ä–æ–≥–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ boolean
      })) : [];
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
      const tasksWithNonBooleanDone = remoteTasks.filter(task => typeof task.done !== 'boolean');
      if (tasksWithNonBooleanDone.length > 0) {
        logger.warn('–í –ë–î –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ç–∏–ø–æ–º –ø–æ–ª—è done:', {
          count: tasksWithNonBooleanDone.length,
          tasks: tasksWithNonBooleanDone.map(t => ({ 
            id: t.id, 
            name: t.name, 
            done: t.done, 
            typeOfDone: typeof t.done 
          }))
        });
      }
      
      const changedTasks = remoteTasks.filter(remoteTask => {
        const localTask = localTasks.find(t => t.id === remoteTask.id);
        // –°—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ boolean –∑–Ω–∞—á–µ–Ω–∏–π
        return localTask && ((localTask.done === true) !== (remoteTask.done === true));
      });
      
      if (changedTasks.length > 0) {
        logger.warn('–ù–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞:', changedTasks.map(t => ({
          id: t.id,
          name: t.name,
          done_in_db: t.done,
          done_local: localTasks.find(lt => lt.id === t.id)?.done
        })));
        toast.success(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: ${changedTasks.length}`);
      } else {
        toast.info('–í—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTodos(remoteTasks);
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–î', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      {isLoading ? (
        <div className="flex justify-center py-12">
          <motion.div 
            animate={{ rotate: 360 }}
            transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
            className="w-8 h-8 border-2 border-t-transparent border-[#E8D9C5] rounded-full"
          />
        </div>
      ) : (
        <>
          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏ —Å—á–µ—Ç—á–∏–∫ */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium text-[#E8D9C5]">
                {isHideCompleted 
                  ? `–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${filteredTodos.length}/${todos.length}` 
                  : `–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${filteredTodos.length}/${todos.length}`
                }
              </span>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–µ—à–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
              {todos.some(todo => {
                const localTask = initialTodos.find(t => t.id === todo.id);
                return localTask && ((localTask.done === true) !== (todo.done === true));
              }) && (
                <span className="text-xs py-0.5 px-1.5 bg-orange-400/20 text-orange-400 rounded-full">
                  –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
                </span>
              )}
            </div>
            
            <div className="flex items-center gap-1">
              {/* –ö–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={syncWithDatabase}
                className="p-1.5 text-[#E8D9C5]/60 hover:text-[#E8D9C5] rounded-md"
                title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
              >
                <MdRefresh className="w-4 h-4" />
              </motion.button>
              
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞ —Å–ø–∏—Å–∫–∞ */}
              <button
                onClick={() => setListView(prev => prev === 'vertical' ? 'horizontal' : 'vertical')}
                className="p-2 rounded-lg bg-white/5 hover:bg-white/10 transition-colors"
                title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥ —Å–ø–∏—Å–∫–∞"
              >
                {listView === 'vertical' ? <MdGridView className="w-5 h-5" /> : <MdViewList className="w-5 h-5" />}
              </button>

              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞ */}
              <button
                onClick={() => setIsHideCompleted(!isHideCompleted)}
                className="p-2 rounded-lg bg-[#E8D9C5]/10 hover:bg-[#E8D9C5]/20 transition-colors"
                title={isHideCompleted ? "–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ" : "–°–∫—Ä—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ"}
              >
                {isHideCompleted ? (
                  <MdDoneAll className="w-5 h-5" />
                ) : (
                  <MdPendingActions className="w-5 h-5" />
                )}
              </button>
            </div>
          </div>
          
          {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
          <AnimatePresence mode="popLayout">
            <div className={`
              ${listView === 'horizontal' 
                ? 'flex gap-4 overflow-x-auto pb-4 snap-x snap-mandatory' 
                : 'grid gap-4'
              }
            `}>
              {filteredTodos.map(todo => (
                <motion.div
                  key={todo.id}
                  layout
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ 
                    opacity: 0,
                    scale: 0.8,
                    x: todo.done ? 100 : 0,
                    transition: { duration: 0.5 }
                  }}
                  className={listView === 'horizontal' ? 'snap-start' : ''}
                >
                  <TodoCard
                    todo={todo}
                    listView={listView}
                    onToggle={handleToggle}
                    onEdit={handleEdit}
                    onDelete={handleDelete}
                  />
                </motion.div>
              ))}
            </div>
          </AnimatePresence>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          <AnimatePresence>
            {selectedTodo && (
              <EditTodoModal
                todo={selectedTodo}
                onClose={() => setSelectedTodo(null)}
                onSave={handleSave}
              />
            )}
          </AnimatePresence>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á */}
          {filteredTodos.length === 0 && (
            <div className="py-8 text-center">
              <p className="text-[#E8D9C5]/60">
                {isHideCompleted 
                  ? "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!" 
                  : "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."}
              </p>
            </div>
          )}
        </>
      )}
    </div>
  )
} 