'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { format, addHours, addDays } from 'date-fns'
import { Icon } from '@iconify/react'
import { RichTextEditor } from './RichTextEditor'
import { supabase } from '@/utils/supabase/client'
import { toast } from 'sonner'
import { Todo } from '@/types/todo'
import { realtime } from '@/utils/realtime'
import { logger } from '@/utils/logger'
import { useTelegram } from '@/app/hooks/useTelegram'

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
const categories = [
  { id: 'water', name: '–í–æ–¥–∞', icon: 'solar:glass-water-bold', color: 'blue' },
  { id: 'sport', name: '–°–ø–æ—Ä—Ç', icon: 'solar:running-round-bold', color: 'green' },
  { id: 'meditation', name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è', icon: 'solar:meditation-bold', color: 'purple' },
  { id: 'work', name: '–†–∞–±–æ—Ç–∞', icon: 'solar:laptop-bold', color: 'rose' },
  { id: 'music', name: '–ú—É–∑—ã–∫–∞', icon: 'solar:music-notes-bold', color: 'pink' },
  { id: 'home', name: '–ë—ã—Ç', icon: 'solar:home-2-bold', color: 'orange' },
  { id: 'finance', name: '–§–∏–Ω–∞–Ω—Å—ã', icon: 'solar:wallet-money-bold', color: 'emerald' }
]

interface Subtask {
  id: string
  todo_id: string
  name: string
  done: boolean
  created_at: string
}

interface EditTodoModalProps {
  todo: Todo | null
  onClose: () => void
  onSave: (todo: Todo) => void
}

export function EditTodoModal({ todo, onClose, onSave }: EditTodoModalProps) {
  const { safeAreaInset, isTelegramWebApp } = useTelegram()
  const [editingTodo, setEditingTodo] = useState<Todo | null>(todo)
  const [subtasks, setSubtasks] = useState<Subtask[]>([])
  const [newSubtask, setNewSubtask] = useState('')
  const [deadline, setDeadline] = useState<Date | null>(todo?.deadline ? new Date(todo.deadline) : null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á
  const loadSubtasks = async () => {
    if (!todo) return

    try {
      logger.debug('üìù –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è', { todoId: todo.id })
      const { data, error } = await supabase
        .from('subtasks')
        .select('*')
        .eq('todo_id', todo.id)
        .order('created_at', { ascending: true })

      if (error) throw error

      logger.info('‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', { count: data.length })
      setSubtasks(data)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∑–∞–¥–∞—á', { error })
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏')
    }
  }

  useEffect(() => {
    if (todo) {
      loadSubtasks()

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö
      const unsubscribe = realtime.subscribe(`subtasks-${todo.id}`, (payload) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞
        const isOurSubtask = (
          (payload.new && 'todo_id' in payload.new && payload.new.todo_id === todo.id) ||
          (payload.old && 'todo_id' in payload.old && payload.old.todo_id === todo.id)
        )

        if (!isOurSubtask) return

        logger.info('üîÑ Realtime: –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–¥–∑–∞–¥–∞—á–∞—Ö', { 
          eventType: payload.eventType,
          todoId: todo.id,
          subtaskId: payload.new?.id || payload.old?.id
        })

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        loadSubtasks()
      })

      return () => {
        unsubscribe()
      }
    }
  }, [todo])

  if (!editingTodo) return null

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
  const handleAddSubtask = async () => {
    if (!newSubtask.trim()) return

    try {
      logger.debug('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É', { 
        todoId: editingTodo.id, 
        name: newSubtask 
      })

      const { data, error } = await supabase
        .from('subtasks')
        .insert({
          todo_id: editingTodo.id,
          name: newSubtask.trim(),
          done: false
        })
        .select()
        .single()

      if (error) throw error

      logger.info('‚úÖ –ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
      setSubtasks([...subtasks, data])
      setNewSubtask('')
      toast.success('–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏', { error })
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É')
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
  const toggleSubtask = async (subtaskId: string) => {
    const subtask = subtasks.find(s => s.id === subtaskId)
    if (!subtask) return

    try {
      const newDoneState = !subtask.done
      logger.debug('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏', { 
        subtaskId, 
        newState: newDoneState 
      })

      const { error } = await supabase
        .from('subtasks')
        .update({ done: newDoneState })
        .eq('id', subtaskId)

      if (error) throw error

      logger.info('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω')
      setSubtasks(subtasks.map(s => 
        s.id === subtaskId ? { ...s, done: newDoneState } : s
      ))
      toast.success(newDoneState ? '–ü–æ–¥–∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ü–æ–¥–∑–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞')
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', { error })
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å')
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = async () => {
    if (!editingTodo) return

    const { error } = await supabase
      .from('todos')
      .update({
        name: editingTodo.name,
        deadline: editingTodo.deadline,
        notes: editingTodo.notes,
        category: editingTodo.category,
        repeat_type: editingTodo.repeat_type,
        repeat_ends: editingTodo.repeat_ends
      })
      .eq('id', editingTodo.id)

    if (!error) {
      onSave(editingTodo)
      toast.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    } else {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const updateDeadline = async (newDate: Date | null) => {
    if (!editingTodo) return
    
    setDeadline(newDate)
    setEditingTodo({ 
      ...editingTodo, 
      deadline: newDate ? newDate.toISOString() : editingTodo.deadline 
    })

    const { error } = await supabase
      .from('todos')
      .update({ 
        deadline: newDate ? newDate.toISOString() : editingTodo.deadline 
      })
      .eq('id', editingTodo.id)

    if (error) {
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω')
    }
  }

  // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∞—Ç–æ–π
  const addHours = async (hours: number) => {
    if (!deadline) {
      const now = new Date()
      now.setHours(now.getHours() + hours)
      await updateDeadline(now)
    } else {
      const newDate = new Date(deadline)
      newDate.setHours(newDate.getHours() + hours)
      await updateDeadline(newDate)
    }
  }

  const addDays = async (days: number) => {
    if (!deadline) {
      const now = new Date()
      now.setDate(now.getDate() + days)
      await updateDeadline(now)
    } else {
      const newDate = new Date(deadline)
      newDate.setDate(newDate.getDate() + days)
      await updateDeadline(newDate)
    }
  }

  const setToday = async () => {
    const now = new Date()
    now.setHours(23, 59, 0, 0) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    await updateDeadline(now)
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm overflow-y-auto"
      style={{
        paddingTop: isTelegramWebApp ? `${safeAreaInset.top}px` : '16px',
        paddingBottom: isTelegramWebApp ? `${safeAreaInset.bottom}px` : '16px',
        paddingLeft: isTelegramWebApp ? `${safeAreaInset.left}px` : '16px',
        paddingRight: isTelegramWebApp ? `${safeAreaInset.right}px` : '16px'
      }}
      onClick={onClose}
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        className="w-full max-w-2xl p-6 bg-gray-900 rounded-2xl shadow-xl space-y-4 my-8"
        onClick={(e) => e.stopPropagation()}
      >
        <h3 className="text-xl font-medium text-white">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</h3>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
        <div className="space-y-2">
          <label className="text-sm text-white/60">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
          <input
            type="text"
            value={editingTodo.name}
            onChange={e => setEditingTodo({ ...editingTodo, name: e.target.value })}
            className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg 
              text-white focus:outline-none focus:border-white/20"
          />
        </div>

        {/* –ó–∞–º–µ—Ç–∫–∞ */}
        <div className="space-y-2">
          <label className="text-sm text-white/60">–ó–∞–º–µ—Ç–∫–∞</label>
          <div className="min-h-[200px] overflow-y-auto">
            <RichTextEditor
              content={editingTodo.notes || ''}
              onChange={content => setEditingTodo({ ...editingTodo, notes: content })}
            />
          </div>
        </div>

        {/* –î–µ–¥–ª–∞–π–Ω */}
        <div className="space-y-2">
          <label className="block text-sm font-medium text-white">Deadline</label>
          <div className="flex flex-col gap-2">
            <input
              type="datetime-local"
              value={deadline ? format(deadline, "yyyy-MM-dd'T'HH:mm") : ''}
              onChange={(e) => updateDeadline(e.target.value ? new Date(e.target.value) : null)}
              className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white"
            />
            <div className="flex flex-wrap gap-2">
              <button
                type="button"
                onClick={() => addHours(1)}
                className="px-3 py-1 text-sm bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg text-white"
              >
                +1 —á–∞—Å
              </button>
              <button
                type="button"
                onClick={() => addHours(3)}
                className="px-3 py-1 text-sm bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg text-white"
              >
                +3 —á–∞—Å–∞
              </button>
              <button
                type="button"
                onClick={() => addDays(1)}
                className="px-3 py-1 text-sm bg-white/5 hover:bg-white/10 border border-white/10 rounded-lg text-white"
              >
                +1 –¥–µ–Ω—å
              </button>
              <button
                type="button"
                onClick={setToday}
                className="px-3 py-1 text-sm bg-emerald-500/20 hover:bg-emerald-500/30 border border-emerald-500/30 rounded-lg text-emerald-400"
              >
                –°–µ–≥–æ–¥–Ω—è
              </button>
            </div>
          </div>
        </div>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
        <div className="space-y-2">
          <label className="text-sm text-white/60">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
          <div className="flex flex-wrap gap-2">
            {categories.map(category => (
              <button
                key={category.id}
                onClick={() => setEditingTodo({ ...editingTodo, category: category.id })}
                className={`
                  flex items-center gap-2 px-3 py-2 rounded-lg transition-colors
                  ${editingTodo.category === category.id 
                    ? `bg-${category.color}-400/20 text-${category.color}-400 border border-${category.color}-400/30` 
                    : 'bg-white/5 hover:bg-white/10 border border-white/10'
                  }
                `}
              >
                <Icon icon={category.icon} className="w-5 h-5" />
                <span>{category.name}</span>
              </button>
            ))}
          </div>
        </div>

        {/* –ü–æ–¥–∑–∞–¥–∞—á–∏ */}
        <div className="space-y-2">
          <label className="text-sm text-white/60">–ü–æ–¥–∑–∞–¥–∞—á–∏</label>
          
          {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–∑–∞–¥–∞—á */}
          <div className="space-y-2">
            {subtasks.map(subtask => (
              <div key={subtask.id} className="flex items-center gap-2">
                <button
                  onClick={() => toggleSubtask(subtask.id)}
                  className={`
                    p-2 rounded-lg transition-colors
                    ${subtask.done 
                      ? 'bg-emerald-400/20 text-emerald-400' 
                      : 'bg-white/5 hover:bg-white/10'
                    }
                  `}
                >
                  <Icon icon={subtask.done ? 'solar:check-circle-bold' : 'solar:circle-line-duotone'} className="w-5 h-5" />
                </button>
                <span className={`flex-1 ${subtask.done ? 'line-through text-white/40' : 'text-white'}`}>
                  {subtask.name}
                </span>
              </div>
            ))}
          </div>

          {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ */}
          <div className="flex gap-2">
            <input
              type="text"
              value={newSubtask}
              onChange={e => setNewSubtask(e.target.value)}
              placeholder="–ù–æ–≤–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞"
              className="flex-1 px-4 py-2 bg-white/5 border border-white/10 rounded-lg 
                text-white focus:outline-none focus:border-white/20"
              onKeyDown={e => e.key === 'Enter' && handleAddSubtask()}
            />
            <button
              onClick={handleAddSubtask}
              className="px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 
                text-white font-medium transition-colors"
            >
              –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex gap-3 pt-4">
          <button
            onClick={onClose}
            className="flex-1 px-4 py-2 rounded-lg bg-white/5 hover:bg-white/10 
              border border-white/10 text-white transition-colors"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            onClick={handleSave}
            className="flex-1 px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 
              border border-white/20 text-white font-medium transition-colors"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>
      </motion.div>
    </motion.div>
  )
} 